package gen

import "html/template"

var clientTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package api

import (
	"encoding/json"
)

type transport interface {
	Call(string, []byte) ([]byte, error) 
  Close()
}

type Client struct {
  t transport
}

func NewClient(r transport) *Client {
  return &Client{t: r}
}

{{- range .Methods }}

func (c *Client) {{.Name}}(req {{ .In }}) (*{{ .Out }}, error) {
  rsp := new({{ .Out }})
  if err := c.call("{{.Name}}",req, rsp); err != nil {
    return nil, parseError(err)
  }
  return rsp, nil
}
{{- end }}

func (c *Client) call(typ string, req, rsp interface{}) error {
	reqBuf, err := json.Marshal(req)
	if err != nil {
		return err
	}
	rspBuf, err := c.t.Call(typ, reqBuf)
	if err != nil {
		return err
	}
	if err := json.Unmarshal(rspBuf, rsp); err != nil {
		return err
	}
	return nil
}

func (c *Client) Close() {
	c.t.Close()
}

func parseError(err error) error {
	if err == nil {
		return nil
	}
	switch err.Error() {
{{- range .Errors }}
  case {{ . }}.Error():
    return {{ . }}
{{- end }}
  }
	return err
}
`))
